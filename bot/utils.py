from data import CATEGORIES
from models import LobbyUserModel, LobbyModel, ProductModel, CategoryModel
from typing import List, Any, Dict


class Category:
    @staticmethod
    def get(contains: str) -> List[CategoryModel]:
        keys = []
        for key in CATEGORIES:
            if contains in key:
                keys.append(key)
        if not keys:
            keys = list(CATEGORIES.keys())
        
        return [
            CategoryModel(
                title=cat,
                products=len(CATEGORIES[cat])
            ) for cat in keys
        ]

    @staticmethod
    def products(category: str | None = "", contains: str = "", only_titles: bool = False) -> List[ProductModel] | List[str]:
        results = []
        
        if category:
            products = CATEGORIES.get(category, [])
        else: 
            products = []
            for cat_products in CATEGORIES.values():
                products.extend(cat_products)
        
        for p in products:
            if contains in p["title"]:
                if only_titles:
                    results.append(p["title"])
                else:
                    results.append(p)
        
        if not results and category:
            if only_titles:
                results = [p["title"] for p in CATEGORIES.get(category, [])]
            else:
                results = CATEGORIES.get(category, [])
        elif not results:
            if only_titles: 
                results = [p["title"] for p in products]
            else:
                results = products
                
        if only_titles:
            return results
        return [
            ProductModel(**prod) for prod in results
        ]



class Lobby:
    db = {}

    @classmethod
    def create_lobby(self, product: ProductModel):
        new_lobby = LobbyModel(
            common_price=product.price,
            bulk=product.price,
            unit=product.unit,
            users=[]
        )

        Lobby.db.setdefault(product.title, new_lobby.model_dump())
        return new_lobby
    
    @classmethod
    def set_lobby(self, product: str, key: Any, new_value: Any):
        lobby = Lobby.db[product]
        lobby[key] = new_value

        return lobby

    @classmethod
    def get_lobby(self, product: str, user_id: int | None = None):
        lobby = LobbyModel(**Lobby.db[product])
        users = lobby.users

        if user_id:
            for user in users:
                model = LobbyUserModel(**user)
                if model.id == user_id:
                    lobby.users = [model]
                    break
        
        return lobby
    
    
    @classmethod
    def set_user(self, id: int, product: str, key: Any, new_value: Any):
        users: List[Dict] = Lobby.db[product]["users"]

        for user in users:
            model = LobbyUserModel(**user)
            if model.id != id:
                continue
            user[key] = new_value
            return model
        
    @classmethod
    def add_user(cls, id: int, product: str, chat_id: int, menu_id: int | None = None):
        lobby_data = cls.db.get(product)
        if not lobby_data:
            raise ValueError(f"–õ–æ–±—ñ –∑ –ø—Ä–æ–¥—É–∫—Ç–æ–º '{product}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        lobby = LobbyModel(**lobby_data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —é–∑–µ—Ä?
        for user in lobby.users:
            if user.id == id:
                return  # –£–∂–µ –≤ –ª–æ–±–±–∏

        new_user = LobbyUserModel(
            id=id,
            chat_id=chat_id,
            menu_id=menu_id or -1,
            wants=0,
            status=""
        )

        lobby.users.append(new_user.model_dump())
        cls.db[product] = lobby.model_dump()
    

    @classmethod
    def remove_user(cls, id: int, product: str):
        lobby_data = cls.db.get(product)
        if not lobby_data:
            raise ValueError(f"–õ–æ–±—ñ –∑ –ø—Ä–æ–¥—É–∫—Ç–æ–º '{product}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        lobby = LobbyModel(**lobby_data)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–∫–ª—é—á–∞—è —Ç–æ–≥–æ, –∫–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        lobby.users = [
            user for user in lobby.users
            if user.id != id
        ]

        cls.db[product] = lobby.model_dump()
    
    @classmethod
    def get_bulk(cls, category: str, product_title: str, lobby: LobbyModel) -> float:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        product = next((
            p for p in Category.products(category, product_title)
            if p.title == product_title
        ), None)

        if not product:
            raise ValueError(f"–ü—Ä–æ–¥—É–∫—Ç '{product_title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}'.")

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        total_wants = sum(user.wants for user in lobby.users)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º bulk'–∏ –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É (–ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
        bulks_sorted = sorted(product.bulks, key=lambda b: b.range[0], reverse=True)

        for bulk_option in bulks_sorted:
            if bulk_option.range[0] <= total_wants <= bulk_option.range[1]:
                return bulk_option.unit_price

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        if total_wants > bulks_sorted[0].range[1]:
            return bulks_sorted[0].unit_price

        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–æ—à–ª–æ –Ω–∏ –ø–æ–¥ –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é —Ü–µ–Ω—É
        return product.price





def merge_product_info(product: ProductModel):
    lobby = Lobby.get_lobby(product.title)
    
    title = f"{product.title} üë•{len(lobby.users)}"

    description = (
        f"–¶—ñ–Ω–∞ –±–µ–∑ –æ–ø—Ç—É {product.price}–≥—Ä–Ω\n"
        f"–¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑ {lobby.bulk}–≥—Ä–Ω"
    )

    return {
        "title": title,
        "description": description
    }






if __name__ == "__main__":
    for prod in Category.products("", "", False):
        Lobby.create_lobby(prod)
    
    r = Category.products("", "–ª", True)[0]
    Lobby.add_user(
        id=834778435745,
        chat_id=1,
        menu_id=12,
        product="–ß—ñ–ø—Å–∏"
    )

    # Lobby.remove_user(
    #     834778435745,
    #     "–ß—ñ–ø—Å–∏"
    # )

    Lobby.set_user(
        834778435745,
        "–ß—ñ–ø—Å–∏",
        "status",
        "‚úÖ"
    )

    Lobby.set_lobby("–ß—ñ–ø—Å–∏", "bulk", 999999999999999.0)

    l = Lobby.get_lobby("–ß—ñ–ø—Å–∏")
    print(l)

    print(Lobby.db)